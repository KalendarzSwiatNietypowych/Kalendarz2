// <auto-generated />
using System;
using Kalendarz2.Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kalendarz2.Infrastructure.EntityFramework
{
    [DbContext(typeof(CalendarDbContext))]
    [Migration("20220602201453_AddSeeder")]
    partial class AddSeeder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Kalendarz2.Infrastructure.EntityFramework.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndEvent")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartEvent")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Kalendarz2.Infrastructure.EntityFramework.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Start off the year with an act of daredevilry. Celebrate Polar Plunge Day on January 1 by taking a dip in the cold, freezing waters of your local lake, river or pond.",
                            Name = "Polar Bear Plunge Day"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2022, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Want to hit the buffet table one last time before you start your New Year’s resolution? Then Buffet Day on January 2 is the fun food holiday for you.",
                            Name = "Buffet Day"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2022, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fruitcake Toss Day on January 3 is an annual holiday that celebrates fruitcakes - the gift that keeps on giving - by tossing them in an empty space.",
                            Name = "Fruitcake Toss Day"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2022, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Here is some trivia for you - January 4 is Trivia Day.",
                            Name = "Trivia Day"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2022, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "January 5 is Bird Day, a day to think about birds in captivity and to take action to ensure that birds are not exploited and are treated humanely.",
                            Name = "Bird Day"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2022, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "January 6 is Bean Day. If your question after hearing this is, why? Well, because beans are healthy – they are rich in proteins and fiber and they taste good.",
                            Name = "Bean Day"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2022, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "January 7 is Old Rock Day. The unofficial holiday encourages people to acknowledge, celebrate, and learn more about old rocks and fossils.",
                            Name = "Old Rock Day"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2022, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "January 8 is Earth’s Rotation Day. The day commemorates when French Physicist, Leon Foucault, demonstrated the Earth rotates on its axis in 1851.",
                            Name = "Earth's Rotation Day"
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2022, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "January 9 is Static Electricity Day a day to honor this unexpected, mostly unpleasant, and sometimes hair rising phenomenon.",
                            Name = "Static Electricity Day"
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Forgot to add being thrifty and eco-friendly to your New Year’s resolution list? Now is your chance to rectify that because January 10 is Cut your Energy Cost Day.",
                            Name = "Cut Your Energy Costs Day"
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2022, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "January 11 is celebrated annually as Learn Your Name in Morse Code Day.",
                            Name = "Learn Your Name in Morse Code Day"
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2022, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Celebrate marzipan, the sweet, almond-based multi-purpose confectionary on January 12, Marzipan Day.",
                            Name = "Marzipan Day"
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2022, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "January 13 is Make your Dreams Come True Day. If you have been procrastinating on fulfilling your dream, this is your chance to get things right.",
                            Name = "Make Your Dreams Come True Day"
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2022, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "January 14 get started early on this year's spring cleaning and organizing on Organize Your Home Day.",
                            Name = "Organize Your Home Day"
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "January 15 is Strawberry Ice Cream Day. It is an unofficial holiday that celebrates ice cream made with strawberries or added strawberry flavors. ",
                            Name = "Strawberry Ice Cream Day"
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2022, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "January 16 is Nothing Day, a day to celebrate, well, nothing.",
                            Name = "Nothing Day"
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2022, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "January 17 is celebrated worldwide as Benjamin Franklin Day.",
                            Name = "Benjamin Franklin Day"
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2022, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "January 18 is Thesaurus Day. Impress your family and friends with big, complicated, and fancy sounding words to celebrate this lexicographic holiday.",
                            Name = "Thesaurus Day"
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2022, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "On January 19 crack open a can of sardines because it's Tin Can Day. ",
                            Name = "Tin Can Day"
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2022, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "January 20 is Penguin Awareness Day. The day helps raise awareness about the flightless birds whose numbers are dwindling by the day. ",
                            Name = "Penguin Awareness Day"
                        },
                        new
                        {
                            Id = 21,
                            Date = new DateTime(2022, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "January 21 is Squirrel Appreciation Day, a day to acknowledge the role that squirrels play in nature and the environment.",
                            Name = "Squirrel Appreciation Day"
                        },
                        new
                        {
                            Id = 22,
                            Date = new DateTime(2022, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Turn the heat up in your kitchen or on your dining table by adding hot sauce to everything you eat on January 22, because it is Hot Sauce Day.",
                            Name = "Hot Sauce Day"
                        },
                        new
                        {
                            Id = 23,
                            Date = new DateTime(2022, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "January 23 is Handwriting Day, a day to get your hands on a pen or pencil and paper and practice and revive the elegant art of handwriting.",
                            Name = "Handwriting Day"
                        },
                        new
                        {
                            Id = 24,
                            Date = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Compliments - they are free, easy to give and receive, they make people happy and build trust. So give someone a compliment someone on January 24, Compliment Day. ",
                            Name = "Compliment Day"
                        },
                        new
                        {
                            Id = 25,
                            Date = new DateTime(2022, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ever wanted to be a rebel? Now is your chance. Don’t celebrate Opposite Day on January 25 by doing everything the wrong way.",
                            Name = "Opposite Day"
                        },
                        new
                        {
                            Id = 26,
                            Date = new DateTime(2022, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "January 26 is Spouse's Day, a day to celebrate your spouse, better half, or significant other.",
                            Name = "Spouse's Day"
                        },
                        new
                        {
                            Id = 27,
                            Date = new DateTime(2022, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Chocolate Cake Day on January 27 celebrates everyone’s and their grandma's favorite cake.",
                            Name = "Chocolate Cake Day"
                        },
                        new
                        {
                            Id = 28,
                            Date = new DateTime(2022, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "January 28 is Data Privacy Day. It is observed every year in the United States, United Kingdom, and many other European countries. ",
                            Name = "Data Privacy Day"
                        },
                        new
                        {
                            Id = 29,
                            Date = new DateTime(2022, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "What is 24 hours long, all about solving problems, and is one of the best unofficial holidays of the year? Puzzle Day, of course.",
                            Name = "Puzzle Day"
                        },
                        new
                        {
                            Id = 30,
                            Date = new DateTime(2022, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "On January 30 wake up and head straight to your favorite bakery to get a croissant for your breakfast, because it is Croissant Day.",
                            Name = "Croissant Day"
                        },
                        new
                        {
                            Id = 31,
                            Date = new DateTime(2022, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bored with doing the same thing in and out? On January 31, take a break from the rut by doing everything backwards, because it is Backwards Day.",
                            Name = "Backwards Day"
                        });
                });

            modelBuilder.Entity("Kalendarz2.Infrastructure.EntityFramework.Participation", b =>
                {
                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("ParticipantId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("Participations");
                });

            modelBuilder.Entity("Kalendarz2.Infrastructure.EntityFramework.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("HolidayId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RemindMe")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("HolidayId");

                    b.HasIndex("UserId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("Kalendarz2.Infrastructure.EntityFramework.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Kalendarz2.Infrastructure.EntityFramework.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("isVerified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Kalendarz2.Infrastructure.EntityFramework.Participation", b =>
                {
                    b.HasOne("Kalendarz2.Infrastructure.EntityFramework.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kalendarz2.Infrastructure.EntityFramework.User", "Participant")
                        .WithMany("Participations")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Kalendarz2.Infrastructure.EntityFramework.Reminder", b =>
                {
                    b.HasOne("Kalendarz2.Infrastructure.EntityFramework.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kalendarz2.Infrastructure.EntityFramework.Holiday", "Holiday")
                        .WithMany()
                        .HasForeignKey("HolidayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kalendarz2.Infrastructure.EntityFramework.User", null)
                        .WithMany("Reminders")
                        .HasForeignKey("UserId");

                    b.Navigation("Event");

                    b.Navigation("Holiday");
                });

            modelBuilder.Entity("Kalendarz2.Infrastructure.EntityFramework.User", b =>
                {
                    b.HasOne("Kalendarz2.Infrastructure.EntityFramework.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Kalendarz2.Infrastructure.EntityFramework.Event", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Kalendarz2.Infrastructure.EntityFramework.User", b =>
                {
                    b.Navigation("Participations");

                    b.Navigation("Reminders");
                });
#pragma warning restore 612, 618
        }
    }
}
